# -*- coding: utf-8 -*-
import time
import datetime as dt
import json
import os
from threading import Thread
import requests
import psycopg2
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

# –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã
START_TIME = dt.datetime.now()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    with open('config.json', 'r', encoding='utf8') as file:
        config = json.load(file)
        group_api_token = config['group']['api_token']
        group_id = config['group']['id']
        postgresql_db_url = config['postgresql_db_url']
        poll_interval = config['additional']['poll_interval']
        min_test_users_count = config['additional']['min_test_users_count']
        description = config['description']
except FileNotFoundError:
    with open('config.json', 'w', encoding='utf8') as file:
        group_api_token = input('Input a VK group access token: ')
        group_id = input('Input a VK group ID: ')
        postgresql_db_url = input('Input a PostgreSQL DB URL: ')
        poll_interval = 60
        min_test_users_count = 150
        description = "C–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n–ö–æ–º–∞–Ω–¥–∞: + (–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, subscribe, –ø–æ–¥–ø–∏—Å–∫–∞)\n–û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–û\n\n–ö–æ–º–∞–Ω–¥–∞: - (–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, unsubscribe, –æ—Ç–ø–∏—Å–∫–∞)\n–û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–û\n\n–ö–æ–º–∞–Ω–¥–∞: –¢–µ—Å—Ç–°–µ—Ä–≤–µ—Ä (—Ç–µ—Å—Ç, testserver, test)\n–û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–∞–Ω–∫–æ–≤ –û–Ω–ª–∞–π–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤\n\n–ö–æ–º–∞–Ω–¥–∞: –ø–∏–Ω–≥ (ping)\n–û–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
        config = {
                    "group": {
                        "api_token": group_api_token,
                        "id": group_id
                        },
                    "additional": {
                        "poll_interval": poll_interval,
                        "min_test_users_count": min_test_users_count
                        },
                    "postgresql_db_url": postgresql_db_url,
                    "description": description
                }
        json.dump(config, file, indent=4)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostgreSQL
try:
    DATABASE_URL = os.environ['DATABASE_URL']
except KeyError:
    DATABASE_URL = postgresql_db_url
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cursor = conn.cursor()


def td_format(td_object):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç datetime.datetime.timedelta –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
    seconds = int(td_object.total_seconds())
    periods = [
        ('',        60*60*24*365),
        ('–º–µ—Å—è—Ü',       60*60*24*30),
        ('–¥',         60*60*24),
        ('—á–∞—Å',        60*60),
        ('–º–∏–Ω—É—Ç',      60),
        ('—Å–µ–∫—É–Ω–¥',      1)
    ]

    strings=[]
    for period_name, period_seconds in periods:
        if seconds > period_seconds:
            period_value, seconds = divmod(seconds, period_seconds)
            if (period_name == '—Å–µ–∫—É–Ω–¥') or (period_name == '–º–∏–Ω—É—Ç'):
                tens = period_value % 10
                if (10 < period_value < 20) or (tens == 0) or (4 < tens < 10):
                    ending = ''
                elif 1 < tens < 5:
                    ending = '—ã'
                else:
                    ending = '–∞'
            elif period_name == '—á–∞—Å':
                tens = period_value % 10
                if (10 < period_value < 20) or (tens == 0) or (4 < tens < 10):
                    ending = '–æ–≤'
                elif 1 < tens < 5:
                    ending = '–∞'
                else:
                    ending = ''
            elif period_name == '–¥':
                tens = period_value % 10
                if (10 < period_value < 20) or (tens == 0) or (4 < tens < 10):
                    ending = '–Ω–µ–π'
                elif 1 < tens < 5:
                    ending = '–Ω—è'
                else:
                    ending = '–µ–Ω—å'
            elif period_name == '–º–µ—Å—è—Ü':
                tens = period_value % 10
                if (10 < period_value < 20) or (tens == 0) or (4 < tens < 10):
                    ending = '–µ–≤'
                elif 1 < tens < 5:
                    ending = '–∞'
                else:
                    ending = ''
            elif period_name == '':
                tens = period_value % 10
                if (10 < period_value < 20) or (tens == 0) or (4 < tens < 10):
                    ending = '–ª–µ—Ç'
                elif 1 < tens < 5:
                    ending = '–≥–æ–¥–∞'
                else:
                    ending = '–≥–æ–¥'
            strings.append('{} {}{}'.format(period_value, period_name, ending))

    return ", ".join(strings)


def makeMailing(user_ids, message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã"""
    n = 100  # –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    for i in range(0, len(user_ids), n):
        sub_user_ids = user_ids[i:i+n]
        vk.messages.send(
            user_ids=sub_user_ids,
            message=message,
            random_id=get_random_id()
            )


class BotKeyboards(object):
    """–ù–∞–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
    def __init__(self):
        self.defaultKeyboard = self.getDefaultKeyboard()

    def getDefaultKeyboard(self):
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        keyboard = VkKeyboard()
        keyboard.add_button('–¢–µ—Å—Ç–°–µ—Ä–≤–µ—Ä', VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', VkKeyboardColor.POSITIVE)
        keyboard.add_button('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', VkKeyboardColor.NEGATIVE)
        return keyboard.get_keyboard()

# –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä—ã–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
class MyVkBotLongPoll(VkBotLongPoll):
    def listen(self):
        while True:
            try:
                for event in self.check():
                    yield event
            except Exception as e:
                print('Error in Bot LongPoll was excepted:', e)


def CommandMessageHandler(text, event=None, from_id=None,
                          from_chat=False, from_user=False):
    reply = ''
    params = {}
    if text.startswith(('ping', '–ø–∏–Ω–≥')):
        uptime = td_format(dt.datetime.now() - START_TIME)
        reply = '>> –ø–æ–Ω–≥\nüÜô –í—Ä–µ–º—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã: {}'.format(uptime)
    elif text.startswith(('help', '–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', 'commands', '—Å–ø—Ä–∞–≤–∫–∞', '–Ω–∞—á–∞—Ç—å')):
        reply = description
    elif text.startswith(('—Ç–æ—Ç–µ—Å—Ç', '—Ç–µ—Å—Ç', 'totest', 'test', '—Ç–µ—Å—Ç—Å–µ—Ä–≤–µ—Ä', 'testserver', '—Å–µ—Ä–≤–µ—Ä')):
        r = requests.get('https://test.tankionline.com/public_test').json()
        reply = 'https://test.tankionline.com'
        for i in range(len(r)):
            n = i + 1
            s = r[i]
            Users = s["UserCount"]
            reply += '\n{}. –°–µ—Ä–≤–µ—Ä [{}]'.format(n, Users)
            if Users > min_test_users_count:
                reply += '‚úÖ'
    elif text.startswith(('–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'subscribe', '+', '–ø–æ–¥–ø–∏—Å–∫–∞')):
        user_id = from_id
        cursor.execute('SELECT vk_user_id, sb_testserver_releases \
                        FROM subscribers \
                        WHERE vk_user_id = %s', (user_id,))
        r = cursor.fetchone()
        if r and r[1]:
            reply = '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤'
        else:
            if r and not r[1]:
                cursor.execute('UPDATE subscribers \
                                SET sb_testserver_releases = true \
                                WHERE vk_user_id = %s', (user_id,))
            else:
                cursor.execute('INSERT INTO subscribers (vk_user_id, sb_testserver_releases) \
                                VALUES (%s, true)', (user_id,))
            conn.commit()
            reply = '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–∞–Ω–∫–æ–≤ –û–Ω–ª–∞–π–Ω'
    elif text.startswith(('–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è', 'unsubscribe', '-', '–æ—Ç–ø–∏—Å–∫–∞')):
        user_id = from_id
        cursor.execute('SELECT vk_user_id, sb_testserver_releases \
                        FROM subscribers \
                        WHERE vk_user_id = %s', (user_id,))
        r = cursor.fetchone()
        if r and r[1]:
            cursor.execute('UPDATE subscribers \
                            SET sb_testserver_releases = false \
                            WHERE vk_user_id = %s', (user_id,))
            conn.commit()
            reply = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–∞–Ω–∫–æ–≤ –û–Ω–ª–∞–π–Ω'
        else:
            reply = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è: –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã'
    elif not from_chat:
        reply = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–°–ø—Ä–∞–≤–∫–∞"'

    return reply, params


# –ú–æ–¥—É–ª—å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
class GroupMessageHandler(Thread):
    def __init__(self, vk_session, group_id):
        Thread.__init__(self)
        self.vk_session = vk_session
        self.group_id = group_id

    def run(self):
        vk = self.vk_session.get_api()
        longpoll = MyVkBotLongPoll(self.vk_session, self.group_id)

        for event in longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if event.from_user:
                    if event.obj.text.startswith('!'):
                        text = event.obj.text[1:].lower()
                    else:
                        text = event.obj.text.lower()
                    reply, params = CommandMessageHandler(text, event, event.obj.from_id, from_user=True)
                    if reply:
                        native_params = {'user_id': event.obj.from_id, 'message': reply, 'keyboard': keyboards.defaultKeyboard, 'random_id': get_random_id()}
                        native_params.update(params)
                        vk.messages.send(**native_params)


# –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¢–û
class TOTestChecker(Thread):
    def __init__(self, vk_session):
        Thread.__init__(self)
        self.vk_session = vk_session

    def run(self):
        vk = self.vk_session.get_api()
        Open_Test_Servers = []
        while True:
            try:
                r = requests.get('https://test.tankionline.com/public_test').json()
            except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
                print('Error in TOTestChecker was excepted:', e)
                continue
            for i in range(len(r)):
                n = i + 1
                test_server = r[i]
                if test_server["UserCount"] > min_test_users_count:
                    if n not in Open_Test_Servers:
                        Open_Test_Servers.append(n)
                        # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                        reply = '–ö–∞–∂–µ—Ç—Å—è, —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä ‚Ññ{} –æ—Ç–∫—Ä—ã—Ç [{}].\nhttps://test.tankionline.com'.format(n, test_server["UserCount"])
                        cursor.execute('SELECT array_agg(vk_user_id) \
                                        FROM subscribers \
                                        WHERE sb_testserver_releases = true')
                        vk_user_ids = cursor.fetchone()[0]
                        if vk_user_ids:
                            makeMailing(vk_user_ids, reply)

                else:
                    if n in Open_Test_Servers:
                        Open_Test_Servers.remove(n)
                Open_Test_Servers = list(filter(lambda x: x <= len(r), Open_Test_Servers))
            time.sleep(poll_interval)


if __name__ == '__main__':
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    vk_group_session = vk_api.VkApi(token=group_api_token)
    vk = vk_group_session.get_api()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞
    keyboards = BotKeyboards()

    # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π
    chatBot = GroupMessageHandler(vk_group_session, group_id)
    tests = TOTestChecker(vk_group_session)
    chatBot.start()
    tests.start()
